--Pathfinding algorithm turle using A* Demo
local curId = 0

local tArgs = {...}

local squareMed = {
	GetAvailableWalking = function(self,finals)
		local numRotate = 0
		local okay = {}
		if ( not turtle.detect()) then --Top
			local temp = newSquare()
			temp.x = self.x+1
			temp.z = self.z
			temp.postMove = 0
			temp.g = self.g+1
			temp:GetHuerestic(finals)
			temp:GetF()
			
			table.insert(okay,temp)
		end
		turtle.turnLeft()
		if ( not turtle.detect()) then --Behind
			local temp = newSquare()
			temp.x = self.x
			temp.z = self.z+1
			temp.postMove = 1
			temp.g = self.g+1
			temp:GetHuerestic(finals)
			temp:GetF()
			
			table.insert(okay,temp)
		end
		turtle.turnLeft()
		if ( not turtle.detect()) then
			local temp = newSquare()
			temp.x = self.x-1
			temp.z = self.z
			temp.postMove = 2
			temp.g = self.g+1
			temp:GetHuerestic(finals)
			temp:GetF()
			
			table.insert(okay,temp)
		end
		turtle.turnLeft()
		if ( not turtle.detect()) then
			local temp = newSquare()
			temp.x = self.x
			temp.z = self.z-1
			temp.postMove = 3
			temp.g = self.g+1
			temp:GetHuerestic(finals)
			temp:GetF()
			table.insert(okay,temp)
		end
		turtle.turnLeft()
		return okay
	end,
	GetCurrentSquare = function(self)
		local x,y,z = gps.locate()
		self.x = x
		self.z = z
	end,
	GetF = function(self)
		self.f = self.g + self.h
		return self.f
	end,
	GetHuerestic = function(self,final)
	local x,y,z = gps.locate()
	local dest = vector.new(final.x,1,final.z)
	local cur  = vector.new(self.x,1,self.z)
	local t = cur:sub(dest)
	self.h = t:length()

	end,
}
				
function newSquare()
	local temp = 
	{
		id = curId,
		x = 0,
		z = 0,
		h = nil,
		f = -1,
		g = 0,
		postMove = -1,
		parentSqare = {},
	}
	curId = curId+1
	setmetatable(temp,{__index = squareMed})
	return temp
end

function removeCurrentSquareFromOpen(set,square)
	for k,v in pairs(set) do
		if (v.x == square.x and v.z == square.z) then
			table.remove(set,k)
			break
		end
	end
	return set
end

function openSetContains( open , square)
	for k,v in pairs(open) do
		if (v.x == square.x and v.z == square.z) then
			return true
		end
	end
	return false
end

function squareWithLowestFScore( open )
	local lowest = newSquare()
	lowest.f = 10000000
	for k,v in pairs(open) do
		if v.f < lowest.f then
			lowest = v
		end
	end
	return lowest
end

function setClosedContains(closed,dest)
	for k,v in pairs(closed) do
		if (v.x == dest.x and v.z == dest.z) then
			return true
		end
	end
	return false
end

function write(inf)
	local handle = fs.open("temp",'w')
	handle.write(inf)
	handle.close()
end

local function solve()
	local open_set = {}
	local closed_set = {}


	local originalSquare = newSquare()
	originalSquare:GetCurrentSquare()
	originalSquare.f = 0

	local destinationSquare = newSquare()
	destinationSquare.x = tArgs[1]
	destinationSquare.z = tArgs[2]

	print(destinationSquare.x..","..destinationSquare.z)

	table.insert(open_set,originalSquare)
	while (#open_set ~= 0) do
		local currentSquare = squareWithLowestFScore(open_set)
		
		open_set = removeCurrentSquareFromOpen(open_set,currentSquare)
		--print(currentSquare.h)

		--if (currentSquare.f ~= 0) then
			if (currentSquare.postMove == 0) then 
				turtle.forward()
			elseif (currentSquare.postMove == 1) then 
				turtle.turnLeft()
				turtle.forward()
				turtle.turnRight()
			elseif (currentSquare.postMove == 2) then 
				turtle.turnLeft()
				turtle.turnLeft()
				turtle.forward()
				turtle.turnLeft()
				turtle.turnLeft()
			elseif (currentSquare.postMove == 3) then 
				turtle.turnRight()
				turtle.forward()
				turtle.turnLeft()
			end
		--end
		--if (setClosedContains(closed_set,destinationSquare)) then
		
		currentSquare:GetCurrentSquare()
		print(currentSquare.x.." : "..destinationSquare.x)
		print(currentSquare.z.." : "..destinationSquare.z)
		if (currentSquare.x - destinationSquare.x == 0 and currentSquare.z - destinationSquare.z == 0) then
			break
		end

		local adjacentSquares = currentSquare:GetAvailableWalking(destinationSquare)
		for k,v in pairs(adjacentSquares) do
			if (not setClosedContains(closed_set,v)) then
				if (not openSetContains(open_set,v)) then
					table.insert(open_set,v)
				else

				end
			end
		end	
		write(textutils.serialize(adjacentSquares))
	end
	print("Done")
end

solve()
